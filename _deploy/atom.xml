<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ian Feather]]></title>
  <link href="http://Ianfeather.github.com/ianfeatherV3/atom.xml" rel="self"/>
  <link href="http://Ianfeather.github.com/ianfeatherV3/"/>
  <updated>2013-01-30T00:07:50+00:00</updated>
  <id>http://Ianfeather.github.com/ianfeatherV3/</id>
  <author>
    <name><![CDATA[Ian Feather]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tools and Cultural Shifts of 2012]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/tools-and-cultural-shifts-of-2012/"/>
    <updated>2013-01-01T12:59:00+00:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/tools-and-cultural-shifts-of-2012</id>
    <content type="html"><![CDATA[<p class="blog-intro">Our acceptance of competent 3rd party code and adoption of tools seems to have been the biggest shift in Front End Development over the past 12 months. The plague, and fear, of jQuery plugins have been replaced by the adoption of libraries like <a href="http://requirejs.org/">requireJS</a>, <a href="http://backbonejs.org/">backbone</a> and <a href="http://underscorejs.org/">underscore</a>. The take-up of pre-processors like <a href="http://sass-lang.com/">Sass</a>, <a href="http://lesscss.org/">Less</a> and <a href="http://coffeescript.org/">Coffeescript</a> have been staggering (and wrought by confusion and competition). The amount of new tools that have come out of the woodwork and required your *immediate attention* has been overwhelming.</p>




<blockquote class="pull-quote">For our current project we have deployed to production just over 2000 times in the past 7 months.</blockquote>


<p>I joined Lonely Planet in January 2012 and the list of tools/libraries that I&#8217;ve been introduced to over the last year is chock full of names that would have baffled me before. If I were to list those which we use day-to-day at work it would include: <a href="https://github.com/etsy/statsd">StatsD</a>, <a href="http://graphite.wikidot.com/">Graphite</a>, <a href="https://github.com/paperlesspost/graphiti">Graphiti</a>, <a href="http://logstash.net/">LogStash</a>, <a href="http://www.elasticsearch.org/">Elastic Search</a>, <a href="http://www.akamai.com">Akamai</a>, <a href="https://github.com/lonelyplanet/fozzie">Fozzie</a>, <a href="http://nodejs.org/">Node</a>, <a href="http://expressjs.com/">Express</a>, <a href="https://github.com/guard/guard">Guard</a>, <a href="https://github.com/documentcloud/jammit">Jammit</a>, <a href="http://requirejs.org/">RequireJS</a>, <a href="https://github.com/lautis/uglifier">Uglifier</a>, <a href="http://gruntjs.com/">Grunt</a>, <a href="http://www.postgresql.org/">Postgres</a>, <a href="http://rubyonrails.org/">Rails</a>, <a href="http://wiki.nginx.org/Main">Nginx</a>, <a href="http://newrelic.com/">New Relic</a>, <a href="http://www.nagios.org/">Nagios</a>, <a href="http://www.pagerduty.com/">PagerDuty</a>, <a href="http://www.opscode.com/chef/">Chef</a>, <a href="http://wiki.opscode.com/display/chef/Knife">Knife</a>, <a href="http://aws.amazon.com/">AWS suite</a>, <a href="http://www.browserstack.com/">BrowserStack</a>, <a href="http://bem.info/method/">BEM</a>, <a href="http://sass-lang.com/">Sass</a>, <a href="http://haml.info/">Haml</a>, <a href="http://coffeescript.org/">Coffeescript</a>&hellip; and many more. The list goes on, and I&#8217;ve forgotten plenty. Exhausting right?</p>

<p>But it hasn&#8217;t just been the tools that have taken prescience, new channels of focus have evolved for me outside of the traditional Big Three  of Front End Development. The main areas I&#8217;ve been involved with as a result of my work at <a href="http://www.lonelyplanet.com/vietnam/ho-chi-minh-city/hotels">Lonely Planet</a> have been Performance, Preprocessors and Rails, Continuous Deployment and BDD.</p>

<h2>Performance</h2>

<p>If I&#8217;m being super critical, my knowledge around performance pre 2012 was limited to caching jQuery selectors and following the <a href="http://developer.yahoo.com/yslow/">YSlow</a> guidelines. If I were to give myself a break though these guidelines are more than enough for an average Joe website. Getting to understand, implement and refine the key concepts behind Lonely Planet&#8217;s concept of <a href="http://www.slideshare.net/mbjenn/performance-and-metrics-at-lonely-planet-14589911">&#8216;Screamingly Fast&#8217;</a> has been a real eye opener and shaving off the milliseconds has become a new form of addiction.</p>

<p>Performance has been something we live and breathe at LP and we discuss, demo and practise it constantly. We&#8217;ve also got a long way to go to get to where we need to be. Our monitoring is good (mostly due to <a href="https://github.com/lonelyplanet/fozzie">Fozzie</a>) but still has a long way to go on the front end. Our reporting and alerting needs to be vastly improved and these are important challenges for 2013.</p>

<h2>Preprocessors and Rails</h2>

<p>The fact that I hadn&#8217;t written a line of Sass prior to 2012 amazes me. The same applies to both Haml and CoffeeScript only to lesser degrees.</p>

<p>I&#8217;ve had my ups and downs with CoffeeScript. At first it was fascinating because it was something new to learn, then infuriating because I couldn&#8217;t write valid CoffeeScript for JavaScript I could have written. Next up came the understanding and the enjoyment it could give, the ease and speed at which you could write and the simplicity of stripping out the verbose syntax. Then more infuriation, as I began to get sloppy with real JavaScript and forgot to reintroduce the verbose syntax.
Now, fortunately, I am in somewhat of a take it or leave it position though if I have a choice I tend to write CoffeeScript.</p>

<p>Sass is a God send and something that frustrates me if I don&#8217;t have access to (thankfully a rare occurrence). Crafting a CSS architecture using Sass has been a learning curve though and it&#8217;s one that I, and I suspect everyone else, is still on.</p>

<p>Haml just makes sense. <a href="http://slim-lang.com/">Slim</a> makes even more sense.</p>

<p>There are other aspects of rails that I&#8217;ve enjoyed learning. Understanding the <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>, the presenter layer, creating gems for our CSS and JS assets and using guard to do more or less everything, to name a few, have all been new challenges. Learning to write Ruby has been particularly enjoyable.</p>

<h2>Continuous Deployment</h2>

<p>Previous to 2012 I&#8217;d worked in an agile environment where we deployed to production at the end of each sprint (1 or 2 weeks). This was after a deploy to a staging environment and a stint of QA. I wasn&#8217;t involved in the build process and my involvement ended after my code was tested and proven to be working.</p>

<p>For our current project we have deployed to production just over 2000 times in the past 7 months and I&#8217;ve been involved throughout. That&#8217;s quite a difference, not only from a cultural perspective but also from an architectural one. We don&#8217;t have any QAs on the project and we&#8217;ve never rolled back a deploy. We&#8217;ve broken things, sure, but we&#8217;ve put ourselves in a position to quickly fix and iterate on them.</p>

<p>It&#8217;s fair to say I was late to the party on this. John Allspaw&#8217;s groundbreaking <a href="http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr">10 deploys a day</a> talk was way back in 2009 and many companies have been practising this technique since then. I&#8217;m glad to be at the party though :)</p>

<p>The architecture is built around <a href="http://www.opscode.com/chef/">Chef</a>, the tool from the guys at <a href="http://www.opscode.com/">Opscode</a>, and we use <a href="http://aws.amazon.com/ec2/">ec2</a> instances to host our code with a load balancer in place to allow us to run AB tests.</p>

<p>One of the tools that I&#8217;ve been super impressed with is <a href="http://wiki.opscode.com/display/chef/Knife">Knife</a> (Opscode again). It&#8217;s a command line tool for interacting and configuring with your cloud based instances. The main benefit for me has been its ability to automatically SSH into multiple remote instances and run commands. So say, for example, we have three different versions of our project running on separate instances (an AB test and a canary build for example) and I&#8217;ve updated each of the git repos with a minor copy change or bumped a gem; I could run one CLI command using knife which would search all instances for those related to our projects, SSH into each of them and run a sudo command to pull the latest code from the repo and then rebuild the instance. A massive time saver and a very cool piece of kit.</p>

<p>The other, non technical, side of Continuous Experimentation and AB testing has been a reintroduction to Statistics (something I hadn&#8217;t touched since A-Level maths!) around AB testing. I&#8217;ve learnt things like understanding the volumes required to gain statistical confidence in the result of your AB test, the learnings we can take from the full histogram and when to ignore certain statistical findings.</p>

<h2>BDD</h2>

<p>Tests are those things that back end devs write, right? Bang goes that attitude in 2012 and it&#8217;s surprising we got away with it for so long on the Front.</p>

<p>On our current project we have ~1000 unit and integration steps. This provides a lot of comfort when you&#8217;re making changes that will go live without QA and provides me with a certain amount of anxiety when I realise our coverage is slipping. This is a huge culture shift in itself but even more so that on the front end we are now using Behaviour and Test Driven Development techniques that have long escaped us.</p>

<p>At first the inconvenience of course outweighed the &#8216;best practice&#8217; but it only takes one bug to slip through for that attitude to change. BDD for me has been an attitude shift in that it allows me to effectively write the blueprint for my code before building and ensures it will be focused and decoupled.</p>

<p>This is another area I will definitely look to improve on during 2013.</p>

<h2>What haven&#8217;t I learned, what have I missed out on?</h2>

<p>I&#8217;ve done next to no work on anything responsive and in fact my exposure has been limited to this blog and a couple of microsites. In some ways I think this is a shame because it&#8217;s a challenging and fascinating area. This is likely something that will become more important for us in 2013.</p>

<p>I haven&#8217;t worked with any of the fancy new JS frameworks like <a href="http://backbonejs.org/">Backbone</a>, <a href="http://emberjs.com/">Ember</a> or <a href="http://angularjs.org/">Angular</a>. Our project toes the line between website and webapp and we made a decision to build without a framework early on. I&#8217;m eager to get involved with these, so a side-project in the new year will likely be built using one of these new technologies.</p>

<h2>What&#8217;s next for 2013?</h2>

<p>Who knows? It&#8217;s going to be an interesting one. I don&#8217;t expect it to be quite as intense as the last one in regards to the amount of new technologies but really I have no idea. It&#8217;s guaranteed to be an exciting one.</p>

<p>I&#8217;m looking forward to doing <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">&#8216;Seven Languages in Seven Weeks&#8217;</a> with the guys at work and I&#8217;ve had an inkling for some time to have a play with <a href="https://github.com/clojure/clojurescript">ClojureScript</a>. I also have a huge list of things to learn which I have been eager to get round to for a while, things like: <a href="http://www.w3.org/TR/css3-flexbox/">FlexBox</a>, <a href="http://gruntjs.com/">Grunt</a>, <a href="https://github.com/mozilla/x-tag">X-Tag</a>, <a href="http://www.webrtc.org/">Web-RTC</a>&hellip;</p>

<p>Other than that, I think it&#8217;s going to be more of the same and hopefully a deeper knowledge of each aspect. We&#8217;ve got a long way to go to get our setup exactly how we want it but I look forward to us never quite getting there and always pushing for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Sass]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/object-oriented-sass/"/>
    <updated>2012-07-30T13:51:00+01:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/object-oriented-sass</id>
    <content type="html"><![CDATA[<p>I’ve been re-examining how we declare and manage CSS objects at LP, recently using the placeholder syntax (%) in Sass over a class directly in the markup. I had a couple of reservations around this, partly because it’s a leap away from the traditional OOCSS method of using multiple classes as building blocks but also in its usability and impact on performance.</p>

<p>The more I’ve been dabbling with the placeholder approach though; the more I can see that traversing the middle ground between the two is going to result in suboptimal code. So I decided to do some research and disprove my reservations.</p>

<p>For those who haven&#8217;t yet used them, selectors with placeholders will not be included in the CSS output but they are able to be extended. For example, using everyone’s favourite media object would mean we no longer have to chain the .media class to benefit from its abstraction and we can make sure the media declaration won&#8217;t be output unless used:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%media
</span><span class='line'>  … the media object …
</span><span class='line'>
</span><span class='line'>.comment-block
</span><span class='line'>  @extend %media</span></code></pre></td></tr></table></div></figure>


<p>Effectively what this allows us to do is construct our css objects in our css as opposed to in the markup. There are definitely pros and cons to this approach and all could be subjective depending on your existing codebase and workflow. I&#8217;ve highlighted some below but I&#8217;d be keen to hear of any that I have missed.</p>

<h2>OOSass pros and cons:</h2>

<h3>Pros</h3>

<ul>
<li>More readable style declarations - there’s no need to keep your naming short</li>
<li>Leaner markup</li>
<li>More selective use of styles (only really applicable to sites with multiple stylesheets responsible for different areas)</li>
</ul>


<h3>Cons (all debatable)</h3>

<ul>
<li>Back end devs have to write Sass if they want to build up styles</li>
<li>Slower to iterate on styles than directly on the dom</li>
<li>Only possible using preprocessors</li>
</ul>


<h2>Performance</h2>

<p>If you’re working with OOCSS chances are you care about performance and metrics. So, whilst the placeholder syntax is feeling like a nice approach to me, I wanted to run some tests to see the effect on css size.</p>

<p>I took the css for a previous incarnation of ianfeather.co.uk as the base file. It was written a long time ago with loose OOCSS and is fairly performant but not heavily optimised.</p>

<p>Following this, I optimised the CSS by abstracting out some classes and thinning down a few selectors. I wasn’t expecting big improvements but I wanted to ensure that I had a performant baseline file to test against.</p>

<p>My main concern was that the gzipped file size would actually increase because of less repetition in the code so it was good to see that this is minimal and that the final code is still smaller. (This blocker could potentially be removed only by extending placeholders which have at least two rule declarations inside.)</p>

<table>
  <tbody>
    <thead class="table-header">
      <th>&nbsp;</th> <th>Size</th> <th>Gzipped</th> <th>Compression</th>
    </thead>
    <tr>
      <td>Base</td>
      <td data-label="Size" class="val">26514</td>
      <td data-label="Gzipped" class="val">7055</td>
      <td data-label="Compression" class="val">73%</td>
    </tr>
    <tr>
      <td>OOCSS</td>
      <td data-label="Size" class="val">26411</td>
      <td data-label="Gzipped" class="val">6196</td>
      <td data-label="Compression" class="val">77%</td>
    </tr>
    <tr>
      <td>OOSass</td>
      <td data-label="Size" class="val">24520</td>
      <td data-label="Gzipped" class="val">5920</td>
      <td data-label="Compression" class="val">76%</td>
    </tr>
  </tbody>
</table>


<h2>Performance in the browser</h2>

<p>The CSS file size is key to the critical path but I also wanted to ensure that using this method wouldn’t increase the selector matching or paint time.</p>

<p>I created two pages, each with 1200 buttons, one using chained classes and one using extended classes. I then profiled them using Opera’s CSS Profiler. Unfortunately the results were absolutely identical so this test was inconclusive. Perhaps a larger test file with more variance would be required to create a true test.</p>

<p>The Profiled results for both pages:</p>

<p><img src="http://getfile3.posterous.com/getfile/files.posterous.com/temp-2012-07-30/gqljjyuevtomeeyHxwFoHctuaqjfAHBqCcuqEcufskGgoioubHnEzukhoqqe/opera-profile.jpg.scaled699.jpg" alt="Opera profile view" /></p>

<h2>Conclusions</h2>

<p>Whilst our test showed there was no huge performance benefit for this approach, it also failed to show a downside for it. This, for me, is a validation of the approach and allows us to look at the more intangible benefits we outlined earlier.</p>

<p>I also think there are performance gains to be made when scaling up. We’ll use our Sass gem, Beaker, across a fairly wide range of projects and using this will mean each project has access to all objects and base classes as well as the ability to pick and choose which are required and which will be output to their project.css file.</p>

<p>Whether or not this approach is right for you is likely dependant on your existing css architecture. For us, we have the opportunity to shape our future CSS and I think this is a healthy way of doing it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Neglected Medium]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/the-neglected-medium-can-we-replicate-creative-communication-online/"/>
    <updated>2012-06-04T15:17:00+01:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/the-neglected-medium-can-we-replicate-creative-communication-online</id>
    <content type="html"><![CDATA[<p>The smoke hung to the ceiling, the smokiness of the whisky clung to the back of our throats. The comfort of the walls liberated our expression. We were conspiring, and madness dared to precede us.</p>

<p>Conspiring on change, deliberating on decision, gathering our thoughts for the future of the web: as we could each see it. Tongues flew fast on the back of ideas and tangents. We bounced from process to product, from theory to theatre and concepts had their potential amplified by each discourse.</p>

<p>Some of us sat up, stood, paced, drew wildly on the walls. Others stared at the floor and shook their heads, looking up to interject in the vein of &#8216;Exactly!&#8217;, &#8216;Tell that to the world&#8217; or &#8216;Pass me the bottle&#8217;.</p>

<p>Can we ever recreate this fast flowing and fluid communication through a remote medium? Do remote teams suffer as a consequence?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hangover Hack Result]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/hangover-hack-result/"/>
    <updated>2012-03-24T15:17:00+00:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/hangover-hack-result</id>
    <content type="html"><![CDATA[<ul>
<li><a class="btn btn-external btn-photo" href="http://ianfeather.co.uk/playground/image-play/">Use the app</a></li>
<li><a class="btn btn-external btn-github" href="https://github.com/Ianfeather/image-play">View the source code</a></li>
</ul>


<p class="blog-intro">Last Saturday, in a canyon of a hangover, I decided to <a href="http://ianfeather.co.uk/hangover-hack/">ditch my client work and just make something fun</a>. I&#8217;d encourage others to do the same. Maybe not <I>in favour</I> of client work but do try and make some time just to play around, experiment and recapture that feeling of why you first got enraptured by the web.</p>




<blockquote class="pull-quote">It&#8217;s fun to just mess about with code like no one is watching. That was the real lesson.</blockquote>


<p>I gave myself a few guidelines:</p>

<ul>
<li>Not to get wrapped up in best practices</li>
<li>Chose speed of development over maintainability. In fact, ignore maintainability.</li>
<li>First thought, best thought.</li>
</ul>


<p>The last is one I borrowed from Jack Kerouac. I didn&#8217;t know what I was going to build and so it made sense to make the outcome an organic production of my erratic, pickled in alcohol, thought process.</p>

<p>I wanted to build something involving images so I dragged out an old chunk of code from a previous project and tapped into the Flickr api. I liked the idea of being able to build a grid of photos based on some parameters. Maybe based on recent keywords from a twitter stream or using geolocation. I started out with just a search box and a lazy grid built of four columns with a ragged y endpoint. A cheat of a solution but I was determined to cheat where possible: I wanted quick development and iteration.</p>

<p>Once I had the gallery mode working on search I got distracted by the idea of using filters to see if you could create instagram like photos with CSS. I could have used a js library but had heard that chrome canary had introduced support for CSS filters so I fired it up and built a little webkit only control panel, a grin on my face from the anarchic approach I was taking in light of recent industry dialogue on the matter.</p>

<h2>What I learned?</h2>

<p>It&#8217;s fun to just mess about with code like no one is watching. That was the real lesson.</p>

<h2>What improvements would I make?</h2>

<p>It took around 6 hours to make, although I split that time with 6 nations rugby, but if I had had more time I&#8217;d build in instagram support and add the ability to switch back and forth between the two modes more easily.</p>

<p>Maybe I&#8217;ll add that in the future but it&#8217;s more likely I&#8217;ll just build something new. Either way, in the future, I&#8217;ll definitely be building something just for the sake of it.</p>

<p><a href="http://ianfeather.co.uk/playground/image-play/">Play around with the end result</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hangover Hack]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/hangover-hack/"/>
    <updated>2012-03-17T15:16:00+00:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/hangover-hack</id>
    <content type="html"><![CDATA[<p>I&#8217;m hungover, on crutches and my girlfriend is at work. I have loads of client work to deal with and by rights that is what today should involve but instead I&#8217;m going to do something different, something I rarely do.</p>

<p>I&#8217;m going to make something <em>FUN</em>.</p>

<p>For no other reason. I&#8217;m just going to take a few hours out and see what comes up at the far end. Maybe it&#8217;s something I should do more often, something everyone should do more often. Let&#8217;s see.</p>

<p>The six nations is on tv and I&#8217;ve got a cup of tea on the go. Hopefully writing this will mean that I actually do it rather than getting caught up in other bits.</p>

<p>Ps. Sorry to my clients in advance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Cheat Sheet for the Terminal-Averse]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/a-cheat-sheet-for-the-terminal-averse/"/>
    <updated>2012-02-14T15:16:00+00:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/a-cheat-sheet-for-the-terminal-averse</id>
    <content type="html"><![CDATA[<p class="blog-intro">Did you know there&#8217;s a cheat sheet you can build into Terminal? It&#8217;s one that allows you to run complex git commands and change directories just by hitting a couple of keys. The best part is they&#8217;re keys that you define for yourself. If you&#8217;re a designer/front end developer who is wary and resistant to the growing impetus of the command line then you&#8217;re in luck.</p>




<blockquote class="pull-quote">By defining rules around my most common workflow routines I&#8217;ve been able to improve productivity whilst also taming an area that was previously foreign territory.</blockquote>


<p>Cut to the source code: <a class="h6" href="https://github.com/Ianfeather/aliases/blob/master/aliases">https://github.com/Ianfeather/aliases/blob/master/aliases</a></p>

<h2>Here&#8217;s how it works:</h2>


<p>Being a terminal-averse user you&#8217;re probably not a huge fan of Vim. If this is the case you can invoke textmate from the command line as standard. If you use coda then you will have to download this plugin first (<a href="http://wefoundland.com/project/command-line_coda/">http://wefoundland.com/project/command-line_coda/</a>) but it will make your life significantly easier. For this tutorial I&#8217;m going to use textmate but if you use coda simply replace &#8216;mate&#8217; with &#8216;coda&#8217; below, or the equivalent for your favourite text editor.</p>

<ol>
    <li>Fire up terminal</li>
    <li>Open your local version of bash_profile


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mate ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


Add a link to your local aliases file by adding this line at the bottom of the file


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash/aliases</span></code></pre></td></tr></table></div></figure>


Now, save and close</li>
    <li>Navigate to your local bash folder


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.bash</span></code></pre></td></tr></table></div></figure>


If the above command yields a &#8216;directory does not exist&#8217; error, create this directory by running


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ~/.bash</span></code></pre></td></tr></table></div></figure>


Now create an aliases file and open it


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch aliases
</span><span class='line'>mate aliases</span></code></pre></td></tr></table></div></figure>


</li>
    <li>This file is where you can create and manage your shortcuts to your oft-used commands. It&#8217;s remarkably easy. For example:


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias gb='git branch'</span></code></pre></td></tr></table></div></figure>


The above line would allow you to view a list of your current git branches simply by typing gb directly into the command line, and:


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias ia='open -b jp.informationarchitects.WriterForMacOSX'</span></code></pre></td></tr></table></div></figure>


Would allow you to open up a file in iA Writer by running: ia myfile.md</li>
</ol>


<p>You can add, group and comment (#) as many rules as you like within this file. Here is a sample of my current alias setup: <a href="https://github.com/Ianfeather/aliases/blob/master/aliases">https://github.com/Ianfeather/aliases/blob/master/aliases</a></p>

<p>It&#8217;s worth noting that this only works for your local user. If you want to create the same rules for all users you execute the same steps in /etc/aliases. Each user would still be able to override these using the above rules though.</p>

<p>By defining rules around my most common workflow routines I&#8217;ve been able to improve productivity whilst also taming an area that was previously foreign territory.</p>

<p>Give it a whirl. Any questions, I&#8217;ll do my best to help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Online Brand Personality Matters Today]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/why-online-brand-personality-matters-today/"/>
    <updated>2011-10-10T15:15:00+01:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/why-online-brand-personality-matters-today</id>
    <content type="html"><![CDATA[<p class="blog-intro">I&#8217;m constantly impressed by businesses who are switched on to the growing impact social media is having on our day to day decisions. Before we commit to anything, be it buying a watch or choosing a restaurant, there is a high chance that we have used the internet to qualify it to ourselves. Right now, that may be Google but in the future every restaurant, boutique shop, airline and fish and chip van will have been qualified using social media - whether they know it or not.</p>




<blockquote class="pull-quote">Quality of a product will always shine through and results accompany it organically but those who can offer more, those who can package a product that reverberates online long after its purchase, will give the user an experience that will keep them returning.</blockquote>


<p>And if you think the above examples were chosen at random: realise that companies in those extraordinarily diverse sectors are not just recognising the value of social media but thoroughly embracing it. See <a href="http://twitter.com/#!/BrixtonVillage">@brixtonvillage</a>, <a href="http://twitter.com/#!/klm">@klm</a> and <a href="http://twitter.com/#!/NoFishyBusiness">@nofishybusiness</a> for some stunning examples.</p>

<p>KLM have shown that a large corporation can have a heart (<a href="http://www.youtube.com/watch?v=Sh-JRoY7_LU">http://www.youtube.com/watch?v=Sh-JRoY7_LU</a>) and a personality that shines above a price driven market. In a crowded market peppered with budget airlines and a recession they&#8217;re separating themselves from the faceless. Air New Zealand  also showed that having a sense of humour could prove successful no matter the product price (<a href="http://www.youtube.com/watch?v=7-Mq9HAE62Y">http://www.youtube.com/watch?v=7-Mq9HAE62Y</a>). Maybe you haven&#8217;t heard of their tactics now, maybe it wouldn&#8217;t affect your buying decision either, but one day they&#8217;ll stick in your memory for this exact reason. What do you think of when you hear Thai Airways, Cathay Pacific or Delta?</p>

<p>At the other end of the spectrum, to prove that there is no business too small for social, we have the Leeds based Fish and Chip shop van going under the moniker of No Fishy Business. They operate out of a nicely designed little vehicle on the streets of Leeds, at festivals, weddings and are available for private hire. Word of mouth was always going to be their method of advertising but word of mouth means so much more than it once used to. They&#8217;ve taken the common british dish and they&#8217;ve spiced it up, not just with their chilli infused batter, but with personality, fun and humour.</p>

<p>Boutique venues like No Fishy Business and Brixton Village will quickly gain cult status simply by offering consistently great service and a great product. As consumers, we have thankfully moved beyond the styrofoam era (at least whilst the sun is out) and we expect more than just a product. We desire an experience. Quality of a product will always shine through and results accompany it organically but those who can offer more, those who can package a product that reverberates online long after its purchase, will give the user an experience that will keep them returning.</p>

<p>Conversely, companies that have too long hidden behind false facades will gradually see them crumble under a barrage of tweets, reviews and dislikes. How do you see companies we already perceive negatively, like NTL, VirginMedia and every other ISP, surviving in the social era? Already PlusNet has emerged as an ISP with a personality, time will tell whether their product stacks up.</p>

<p>Whether or not this happens in two, five or ten years, no one can know. What we do know is that the internet is poised and ready to take steps into a new era. Facebook has amassed vast quantities of data which is begging to be monetised. (The potential additions of more specific buttons to replace the Like button show a shift in their direction - <a href="http://techcrunch.com/2011/09/19/facebooks-new-buttons/">http://techcrunch.com/2011/09/19/facebooks-new-buttons/</a>). We can now use Twitter to quantify the popularity of a brand with Sentiment, Activity and Followers. Brands are appearing in Instagram photos, Gowalla tags and Foursquare check-ins.</p>

<p>Let&#8217;s muse for a moment that Facebook does bring out a browser as has been hinted by many. Let&#8217;s go one step further and assume that they bring a tablet to the market with a custom browser installed. Facebook then becomes THE companion for your web experience. It&#8217;s everywhere you want it to be (and many places you won&#8217;t).</p>

<p>Maybe you&#8217;ve heard of Facebook&#8217;s allegiance with Bing. Microsoft has sunk many small fortunes into keeping it alive and slowly but surely it has chipped away at Google&#8217;s dominance. But, let&#8217;s face it, far too slowly for anyone to care. If Facebook were to suddenly integrate the Like button into Bing&#8217;s search stream, with SEO replaced by user response and review, suddenly Bing would leap into relevance. Your search results wouldn&#8217;t be dictated by who could spend the most on SEO but instead by organic, user-driven data.</p>

<p>This is just one potential combination of powerhouse companies. It is also just one possibility in a long line of events that will dictate our future as consumers and users.</p>

<p>Not only is this good for the user it&#8217;s good for each and every company. They have been gifted a voice to the world. For free. How they use it is up to them but to think that they can survive without it is foolhardy. To quote the CEO of <a href="http://www.burberry.com">Burberry</a>, Angela Ahrendts,</p>

<blockquote>&#8220;You have to build a social enterprise. You have to be totally connected with everyone who touches your brand. If you don&#8217;t do that, I don&#8217;t know what your business model is in 5 years.&#8221;</blockquote>


<p>The consumer-digital world has a lot to look forward to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There are no Web Experts]]></title>
    <link href="http://Ianfeather.github.com/ianfeatherV3/there-are-no-web-experts/"/>
    <updated>2011-07-18T15:12:00+01:00</updated>
    <id>http://Ianfeather.github.com/ianfeatherV3/there-are-no-web-experts</id>
    <content type="html"><![CDATA[<p class="blog-intro">In our ever changing industry we have at least one truth: there are no experts. Sure, in our midst are industry leaders, consultants, even the odd guru, but it must be remembered that no one has all the answers. For every good link, there are ten bad ones. For every insightful tweet there are a hundred misleading ones (not to mention a million mentioning iPads). And in the time between <a href="http://www.alistapart.com" title="A List Apart">alistapart</a> articles, there are maybe a thousand new individuals entering our industry who are learning from antiquated sources.</p>




<blockquote class="pull-quote">&#8220;The reason I know that I am intelligent is that I know that I know nothing&#8221;</blockquote>


<p>During my time in the web industry I have already seen a change in attitudes towards this way of thinking. Early on I found opinion-driven rants permeated by hyperbolic advice all presented in absolute terms. There was no area for discussion. There was simply a right way and a thousand wrong ways.</p>

<p>Now more and more I feel like there has been a shift for the better, a trend of discussion has developed over dictation. The question I find myself asking is: Has there actually been a culture shift or have I simply refined the sources?</p>

<p>What makes our industry so exciting is that everyone has a voice and everyone has access to that voice. It also presents us with a bigger issue: how do we present the best information to those searching for it? How do newcomers to the industry catch up with the rapidly evolving entity that the web has become? Especially in the face of overwhelming adverse content?</p>

<p>Well, as individuals, we can&#8217;t dictate these sources. We can only implore a critical mind. Socrates was quoted by Plato as saying:</p>

<p>Paradoxical, and indeed an imprecise translation, or not, his expression is one that carries universal meaning. A potentially clearer translation (via Wikipedia) is &#8220;I am only wise insofar as what I don&#8217;t know, I don&#8217;t think I know&#8221;</p>

<p>This wisdom applies to all of us, no matter our profession or position within it. To all those starting out in the industry, if by chance you have stumbled across this blog, my hope is that you question everything. There are too many sources tweeting or blogging their philosophy of the web as gospel when there is no gospel, not in the online world. No one knows where the web is going because we&#8217;re all steering it collectively.</p>

<p>And it is changing for the better: content-first, mobile, html5, css3 and the potential for the elimination of older browsers have us all excited. My concern is that we are running away from teaching the fundamentals to anyone entering our industry.</p>

<p>I welcome your feedback.</p>

<h3>Resources:</h3>

<p><a href="http://www.alistapart.com" title="A List Apart">http://www.alistapart.com</a></p>

<p>It&#8217;s not for me to dictate where you should go for knowledge. That said, if you are new to the industry and want a reliable source I can offer no better than alistapart. Some of the content may be more advanced and thematic than you are searching for but stick with it, follow the authors on twitter, follow those they reference and build yourself up a reliable array of sources. And then question all of them!</p>

<p>And here are a couple of excellent resources if per chance you are starting out in the Front End Development Game. I wish they had been around, or I had been aware of them, when I first began:</p>

<p><a href="http://csswizardry.com/web-design+/" title="Web Design Plus">http://csswizardry.com/web-design+/</a> via @csswizardry
<a href="http://taitems.github.com/Front-End-Development-Guidelines/" title="Taitems Front End Development Guidelines">http://taitems.github.com/Front-End-Development-Guidelines/</a> via @taitems</p>
]]></content>
  </entry>
  
</feed>
